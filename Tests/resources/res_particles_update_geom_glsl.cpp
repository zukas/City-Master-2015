#include "res_particles_update_geom_glsl.h"
const char* get_res_particles_update_geom_glsl() { return "#version 330\n\nlayout(points) in;\nlayout(points) out;\nlayout(max_vertices = 30) out;\n\n// All that we get from vertex shader\n\nin vec3 vPositionPass[];\nin vec3 vVelocityPass[];\nin vec3 vColorPass[];\nin float fLifeTimePass[];\nin float fSizePass[];\nin float iTypePass[];\nin float reusePass[];\n\n// All that we send further\n\nout vec3 vPositionOut;\nout vec3 vVelocityOut;\nout vec3 vColorOut;\nout float fLifeTimeOut;\nout float fSizeOut;\nout float iTypeOut;\nout float reuseOut;\n\nuniform vec3 vGenPosition; // Position where new particles are spawned\nuniform vec3 vGenGravityVector; // Gravity vector for particles - updates velocity of particles \nuniform vec3 vGenVelocityMin; // Velocity of new particle - from min to (min+range)\nuniform vec3 vGenVelocityRange;\n\nuniform vec3 vGenColor;\nuniform float fGenSize; \nuniform float fDim;\nuniform float ttime;\n\nuniform float fGenLifeMin, fGenLifeRange; // Life of new particle - from min to (min+range)\nuniform float fTimePassed; // Time passed since last frame\n\nuniform vec3 vRandomSeed; // Seed number for our random number function\nvec3 vLocalSeed;\n\nuniform int iNumToGenerate; // How many particles will be generated next time, if greater than zero, particles are generated\nuniform sampler1D tsampler[1];\n//varying vec3 v_texCoord3D;\n\nhighp float rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nhighp float rand_pos(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return (fract(sin(sn) * c) + 1.0) / 2.f;\n}\n\nvec3 rand_v3(vec3 co, float axel)\n{\n    return vec3(rand(co.xy), rand(co.xz), rand(co.yz)) * axel;\n}\n\nvec3 rand_v3_pos(vec3 co, float axel)\n{\n    return vec3(rand_pos(co.xz), rand_pos(co.yz), rand_pos(co.xy)) * axel;\n}\n\nvec3 rand_v3_2(float TexCoord)\n{\n    vec3 r = texture(tsampler[0], TexCoord).xyz;\n    r = rand_v3(r, 1);\n    r -= vec3(0.5, 0.5, 0.5);\n    return r;\n}\n\nvec3 some_rand()\n{\n    vec3 val = vRandomSeed / ttime;\n    val.x = rand(val.xy);\n    val.y = rand(val.yz);\n    val.z = rand(val.xy);\n    val = rand_v3(val, 1.0);\n    return val;\n}\n\n#define PI 3.14159\n#define PI2 PI * 2.0\n#define INC PI / 8.0\n#define INC2 PI2 / 8.0\n#define P_LAUNCH 0.0f\n#define P_SHELL 1.0f\n#define P_SHELL2 2.0f\n\nvoid main()\n{\n     float Age = fLifeTimePass[0] + fTimePassed;\n\n     if(iTypePass[0] == P_LAUNCH)\n     {\n        if(Age > fGenLifeRange)\n        {\n            for (int i = 0 ; i < iNumToGenerate ; i++)\n            {\n                vPositionOut = vGenPosition + some_rand() * 20;\n                vec3 r = some_rand();\n//                r.y = max(r.y, 0.3);\n                vVelocityOut = normalize(r) + some_rand() * 3;\n                vColorOut = vGenColor;\n                fLifeTimeOut = 0.0;\n                fSizeOut = fGenSize;\n                iTypeOut = P_SHELL;\n                reuseOut = P_LAUNCH;\n                EmitVertex();\n                EndPrimitive();\n            }\n            Age = 0.0;\n        }\n        vPositionOut = vGenPosition;\n        vVelocityOut = vGenVelocityRange;\n        vColorOut = vGenColor;\n        fLifeTimeOut = Age;\n        fSizeOut = fGenSize;\n        iTypeOut = P_LAUNCH;\n        reuseOut = P_LAUNCH;\n        EmitVertex();\n        EndPrimitive();\n     }\n     else\n     {\n        float DeltaTimeSecs = fTimePassed / 1000.0f;\n        float t1 = fLifeTimePass[0] / 1000.0;\n        float t2 = Age / 1000.0;\n        vec3 DeltaP = DeltaTimeSecs * vVelocityPass[0];\n        vec3 DeltaV = some_rand() * DeltaTimeSecs;\n        if (iTypePass[0] == P_SHELL)\n        {\n            if (Age < fGenLifeMin)\n            {\n                iTypeOut = P_SHELL;\n                vPositionOut = vPositionPass[0] + DeltaP;\n                vVelocityOut = vVelocityPass[0] + DeltaV;\n                vColorOut = vColorPass[0];\n                fLifeTimeOut = Age;\n                fSizeOut = fSizePass[0];\n                reuseOut = reusePass[0];\n                EmitVertex();\n                EndPrimitive();\n            }\n            else\n            {\n                for (int i = 0 ; i < iNumToGenerate ; i++)\n                {\n                    iTypeOut = P_SHELL2;\n                    vPositionOut = vPositionPass[0] + some_rand();\n                    vec3 r = some_rand();\n                    vVelocityOut = normalize(r) * 2 + some_rand() * 5;\n                    fLifeTimeOut = 0.0f;\n                    fSizeOut = fSizePass[0];\n                    reuseOut = reusePass[0];\n                    vColorOut = vColorPass[0];\n                    EmitVertex();\n                    EndPrimitive();\n                }\n            }\n        }\n        else\n        {\n            if (Age < fGenLifeRange)\n            {\n                iTypeOut = P_SHELL2;\n                vPositionOut = vPositionPass[0] + DeltaP;\n                vVelocityOut = vVelocityPass[0] + DeltaV;\n                vColorOut = vColorPass[0];\n                fLifeTimeOut = Age;\n                fSizeOut = fSizePass[0];\n                reuseOut = reusePass[0];\n                EmitVertex();\n                EndPrimitive();\n            }\n        }\n     }\n}\n"; }
