#include "res_object_frag_glsl.h"
const char* get_res_object_frag_glsl() { return "#version 330\n\nuniform sampler2D tsampler[5];\nuniform int tcount;\nuniform vec3 lightPosition;\nuniform float lightStrength;\nuniform int objectSelected;\n\nin vec2 UV;\nin vec3 Position_worldspace;\nin vec3 Normal_cameraspace;\nin vec3 EyeDirection_cameraspace;\nin vec3 LightDirection_cameraspace;\n\nout vec3 colour;\n\nvoid main()\n{\n\n    vec4 tmpc = vec4(0.0, 0.0, 0.0, 0.0);\n    for(int i = 0; i < tcount; i++)\n    {\n        if(i == 0)\n        {\n            tmpc+=texture2D(tsampler[0], UV);\n        }\n        else if(i == 1)\n        {\n            tmpc+=texture2D(tsampler[1], UV);\n        }\n        else if(i == 2)\n        {\n            tmpc+=texture2D(tsampler[2], UV);\n        }\n        else if(i == 3)\n        {\n            tmpc+=texture2D(tsampler[3], UV);\n        }\n        else if(i == 4)\n        {\n            tmpc+=texture2D(tsampler[4], UV);\n        }\n    }\n    if(tcount == 0)\n    {\n        tmpc = vec4(UV.x, UV.y, 0.35, 1.0);\n    }\n\n    vec3 LightColor = vec3(1,0.92,0.90);\n    if(objectSelected == 1)\n    {\n        LightColor = vec3(0.89,0.42,0.48);\n    }\n    float LightPower = length( lightPosition ) * lightStrength;\n\n    vec3 MaterialDiffuseColor = tmpc.rgb;\n    vec3 MaterialAmbientColor = vec3(0.82,0.82,0.82) * MaterialDiffuseColor;\n    vec3 MaterialSpecularColor = vec3(0.25,0.25,0.25);\n\n    float distance = length( lightPosition - Position_worldspace );\n\n    vec3 n = normalize( Normal_cameraspace );\n    vec3 l = normalize( LightDirection_cameraspace );\n    float cosTheta = clamp( dot( n,l ), 0.1, 1 );\n\n    vec3 E = normalize(EyeDirection_cameraspace);\n    vec3 R = reflect(-l,n);\n    float cosAlpha = clamp(dot( E,R ), 0, 1);\n\n    colour = MaterialAmbientColor * LightColor +\n            MaterialDiffuseColor * LightColor  * cosTheta / (distance*distance) +\n            MaterialSpecularColor * LightColor  * pow(cosAlpha,5) / (distance*distance);\n\n\n}\n"; }
