#include "res_object_vert_glsl.h"
const char* get_res_object_vert_glsl() { return "#version 330\n\nlayout(location = 0) in vec3 inPosition;\nlayout(location = 1) in vec3 inNormal;\nlayout(location = 2) in vec2 inUV;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 modelMatrix;\nuniform vec3 lightPosition;\n\nout vec2 UV;\nout vec3 Position_worldspace;\nout vec3 Normal_cameraspace;\nout vec3 EyeDirection_cameraspace;\nout vec3 LightDirection_cameraspace;\n\nvoid main()\n{\n    UV = inUV;\n\n    vec4 tmpPos = modelMatrix * viewMatrix * vec4(inPosition,1);\n    Position_worldspace = tmpPos.xyz;\n\n    vec4 other_pos = vec4(0.1, 0.1, 0.2, 1.0);\n\n    vec4 tmpPosCam = modelMatrix * viewMatrix * vec4(inPosition,1);\n    vec3 PosCam = tmpPosCam.xyz;\n\n    EyeDirection_cameraspace = vec3(tmpPosCam - tmpPos).xyz;\n\n    vec4 tmpLightPos = modelMatrix * viewMatrix * vec4(lightPosition ,1);\n    LightDirection_cameraspace = (tmpLightPos - tmpPosCam).xyz;\n\n    vec4 tmpNormal = modelMatrix * vec4(inNormal,0);\n    Normal_cameraspace = normalize(tmpNormal).xyz;\n\n    mat4 MVP = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = MVP * vec4(inPosition, 1.0);\n}\n\n"; }
